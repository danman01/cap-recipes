server {
  listen <%=nginx_unicorn_port%>;
  server_name <%=nginx_unicorn_server_name%>;
  root <%=deploy_to%>/current/public;   # <--- be sure to point to 'public'!

  access_log syslog:info main;
  error_log syslog:info;

  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  <%= "proxy_set_header X-Forwarded-Proto $scheme;" if nginx_unicorn_set_scheme %>
  proxy_set_header Host $http_host;
  # On your backend, you can pull the request header x-exampledotcom-rid, and log it or tie it to whatever you may like.
  # This makes it really easy to correlate backend exceptions or instrumentation with frontend http request logs.
  # Goes well with the new Rails 3.2/master support for X-Request-Id.
  proxy_set_header X-Request-Id $request_id;
  proxy_redirect   off;

  location ~ ^/(flash|pdf|images|javascripts|stylesheets|compiled|fonts|attachments)/ {
    expires      180d;
    access_log    off;
  }

  # Rails 3 asset pipeline
  location ~ ^/assets/ {
    expires 1y;
    add_header Cache-Control public;

    # Some browsers still send conditional-GET requests if there's a
    # Last-Modified header or an ETag header even if they haven't
    # reached the expiry date sent in the Expires header.
    add_header Last-Modified "";
    add_header ETag "";
    break;
  }

  location / {
    if (!-f $request_filename) {
      proxy_pass http://<%=application%>_unicorn;
      break;
    }
  }

}

# Only one Upstream should exist.
upstream <%=application%>_unicorn {
  # it is recommended to set “fail_timeout=0” for in your nginx configuration like this to have nginx always retry backends that may have had workers SIGKILL-ed due to timeouts.
  # may be proxy_upstream_fail_timeout in our version of nginx
  server unix:<%=nginx_unicorn_upstream_socket%> <%= nginx_unicorn_fail_timeout.nil? ? "" : "fail_timeout=#{nginx_unicorn_fail_timeout}"%>;
}
