# Sample verbose configuration file for Unicorn (not Rack)
#
# This configuration file documents many features of Unicorn
# that may not be needed for some applications. See
# http://unicorn.bogomips.org/examples/unicorn.conf.minimal.rb
# for a much simpler configuration file.
#
# See http://unicorn.bogomips.org/Unicorn/Configurator.html for complete
# documentation.

# Use at least one worker per core if you're on a dedicated server,
# more will usually help for _short_ waits on databases/caches.

#http://sleekd.com/general/configuring-nginx-and-unicorn/
#http://www.rubyrescue.com/blog/2010/06/23/migrating-rails-to-unicorn-from-phusion-passenger/

# Help ensure your application will always spawn in the symlinked
# "current" directory that Capistrano sets up.
# working_directory "/path/to/app/current" # available in 0.94.0+

# listen on both a Unix domain socket and a TCP port,
# we use a shorter backlog for quicker failover when busy
# listen "/tmp/.sock", :backlog => 64
# listen 3000, :tcp_nopush => true

workdir = File.expand_path(File.dirname(__FILE__)+ '/..')
worker_processes 3
working_directory workdir

# This loads the application in the master process before forking
# worker processes
# Read more about it here:
# http://unicorn.bogomips.org/Unicorn/Configurator.html
preload_app true

timeout <%=unicorn_timeout%>

# This is where we specify the socket.
# We will point the upstream Nginx module to this socket later on
listen "#{workdir}/tmp/sockets/unicorn.sock", :backlog => <%=unicorn_backlog%>, :tries => <%=unicorn_tries%>

pid "#{workdir}/tmp/pids/unicorn.pid"

# Set the path of the log files inside the log folder of the testapp
stderr_path "#{workdir}/log/unicorn.stderr.log"
stdout_path "#{workdir}/log/unicorn.stdout.log"

# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

before_fork do |server, worker|
# This option works in together with preload_app true setting
# What is does is prevent the master process from holding
# the database connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!
    
  old_pid = "#{workdir}/tmp/pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", old_pid_number = File.read(old_pid).to_i)
      puts "I slayed the Unicorn! with PID #{old_pid_number}"
    rescue Errno::ENOENT, Errno::ESRCH
      puts "Darn, PID #{old_pid_number} was already dead."
    end
  end
  
  # *optionally* throttle the master from forking too quickly by sleeping
  #sleep 1
end

after_fork do |server, worker|
# Here we are establishing the connection after forking worker
# processes
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end
